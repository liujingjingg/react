{"version":3,"sources":["Request.js","todolist/Toding.js","todolist/Todoinput.js","todolist/shijiandebangding.js","index.js"],"names":["Request","state","data","fetch","then","res","json","setState","result","console","log","this","map","item","index","key","album_title","author","Component","Toding","props","a","className","todo","idex","onClick","delTodo","defaultProps","Todoinput","handleChange","e","target","name","parseInt","value","handleInput","keyCode","addTodo","n1","n2","style","color","htmlFor","id","onChange","onKeyDown","type","ReactDOM","render","document","getElementById"],"mappings":"yLAEqBA,G,mBACjB,aAAc,IAAD,8BACT,+CACKC,MAAM,CACPC,KAAK,IAHA,E,iFAMO,IAAD,OACfC,MAAM,uDACLC,MAAK,SAACC,GACH,OAAOA,EAAIC,UAEdF,MAAK,SAACC,GACH,EAAKE,SAAS,CACFL,KAAKG,EAAIG,SAErBC,QAAQC,IAAIL,Q,+BAYhB,OACI,6BACI,wDACA,4BAEQM,KAAKV,MAAMC,KAAKU,KAAI,SAACC,EAAKC,GAAN,OAChB,wBAAIC,IAAKD,GACT,4BAAKD,EAAKG,aACV,2BAAIH,EAAKI,kB,GApCAC,c,QCChBC,E,iLACP,IAAD,OACL,OACI,6BACI,uDAASR,KAAKS,MAAMC,GACpB,wBAAIC,UAAU,QAEPX,KAAKS,MAAMG,KAAKX,KAAI,SAACC,EAAKW,GAAN,OAAa,wBAAIT,IAAKS,GAAOX,EAAhB,MAAwB,4BAAQY,QAAS,kBAAI,EAAKL,MAAMM,QAAQF,KAAxC,0B,GAP5CN,aAkBpCC,EAAOQ,aAAa,CAChBJ,KAAK,CAAC,EAAE,EAAE,GACVF,EAAE,K,YCbeO,E,YACjB,aAAc,IAAD,8BACT,+CAMJC,aAAa,SAACC,GAEV,EAAKvB,SAAL,eACKuB,EAAEC,OAAOC,KAAMC,SAA0B,KAAjBH,EAAEC,OAAOG,MAAW,EAAEJ,EAAEC,OAAOG,UAVnD,EAabC,YAAY,SAACL,GACM,KAAZA,EAAEM,SACL,EAAKhB,MAAMiB,QAAQP,EAAEC,OAAOG,QAb5B,EAAKjC,MAAM,CACPqC,GAAI,EACJC,GAAI,GAJC,E,sEAkBH,IAAD,OACL,OACI,6BACI,2BAAOC,MAAO,CACVC,MAAM9B,KAAKV,MAAMqC,GAAG3B,KAAKV,MAAMsC,GAAG,GAAG,MAAM,SAC5CG,QAAQ,OAFX,sBAGA,2BAAOC,GAAG,MAAMX,KAAK,KAAKY,SAAU,SAACd,GAAD,OAAK,EAAKD,aAAaC,IAAII,MAAOvB,KAAKV,MAAMqC,GAAIO,UAAW,SAACf,GAAD,OAAK,EAAKK,YAAYL,IAAIgB,KAAK,SAJnI,IAMI,2BAAOd,KAAK,KAAKY,SAAU,SAACd,GAAD,OAAK,EAAKD,aAAaC,IAAII,MAAOvB,KAAKV,MAAMsC,GAAIM,UAAW,SAACf,GAAD,OAAK,EAAKK,YAAYL,IAAIgB,KAAK,SACtH,2BAAInC,KAAKV,MAAMqC,GAAG3B,KAAKV,MAAMsC,S,GA5BNrB,aCNDA,Y,OCUtC6B,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,U","file":"static/js/main.a7718f39.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Axios from 'axios';\r\nexport default class Request extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            data:[]\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://api.apiopen.top/musicRankingsDetails?type=1')\r\n        .then((res)=>{\r\n            return res.json();\r\n        })\r\n        .then((res)=>{\r\n            this.setState({\r\n                        data:res.result\r\n                    })\r\n            console.log(res);\r\n        })\r\n\r\n        // Axios.get('https://api.apiopen.top/musicRankingsDetails?type=1')\r\n        // .then((res)=>{\r\n        //     console.log(res)\r\n        //     this.setState=({\r\n        //         data:res.data.result\r\n        //     })\r\n        // })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>请求接口</h1>\r\n                <ul>\r\n                    {\r\n                        this.state.data.map((item,index)=>(\r\n                            <li key={index}>\r\n                            <h2>{item.album_title}</h2>\r\n                            <p>{item.author}</p>\r\n                        </li>\r\n                        ))\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class Toding extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>正在进行{this.props.a}</h1>\r\n                <ul className=\"list\">\r\n                   {\r\n                       this.props.todo.map((item,idex)=><li key={idex}>{item}---<button onClick={()=>this.props.delTodo(idex)}>删除</button></li>)  \r\n                       }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nToding.propTypes={\r\n    todo:PropTypes.string\r\n}\r\nToding.defaultProps={\r\n    todo:[2,3,4],\r\n    a:100\r\n}","import React, { Component } from 'react'\r\n//子组件---->父组件传递数据，调用子组件时往子组件传递一个函数\r\n//子组件通过props调用该函数\r\n\r\n//受控组件和非受控组件\r\n//受控组件：value值react控制\r\n//可以方便拿到input框的值、实时获取或处理输入的内容\r\n\r\n\r\n//受控组件\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            n1: 0,\r\n            n2: 0\r\n        }\r\n    }\r\n    handleChange=(e)=>{\r\n\r\n        this.setState({\r\n            [e.target.name]:parseInt(e.target.value===''?0:e.target.value)\r\n        })\r\n    }\r\n    handleInput=(e)=>{\r\n        if(e.keyCode===13){\r\n        this.props.addTodo(e.target.value);//=this.state.val\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <label style={{\r\n                    color:this.state.n1+this.state.n2>10?'red':'green'\r\n                }} htmlFor=\"inp\">输入：</label>\r\n                <input id=\"inp\" name=\"n1\" onChange={(e)=>this.handleChange(e)} value={this.state.n1} onKeyDown={(e)=>this.handleInput(e)} type=\"text\"/>\r\n                +\r\n                <input name=\"n2\" onChange={(e)=>this.handleChange(e)} value={this.state.n2} onKeyDown={(e)=>this.handleInput(e)} type=\"text\"/>\r\n                <p>{this.state.n1+this.state.n2}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n//非受控组件\r\n//代码简单，比较适用于一次性获取表单所有值\r\n// export default class Todoinput extends Component{\r\n//     componentDidMount(){\r\n//         console.log(this.inp.value);\r\n//         console.log(this.refs);\r\n//     }\r\n//     serach=()=>{\r\n//         console.log(this.inp.value);\r\n//     }\r\n//     render(){\r\n//         return (<div>\r\n//             <input ref={(inp)=>this.inp=inp} type=\"text\"/>\r\n//             <button onClick={this.serach}>查询</button>\r\n//         </div>)\r\n//     }\r\n// }","import React, { Component } from 'react'\r\nimport Toding from './Toding'\r\nimport Todoinput from './Todoinput'\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            todo:[1,2,3]\r\n        }\r\n        var arr=[1,2,{a:100}];\r\n      //  var b=JSON.parse(JSON.stringify(arr));\r\n        //var b=[...arr];\r\n        //b[2].a=200;\r\n        //console.log(arr);\r\n\r\n\r\n        //对象的拷贝assign\r\n        var a={a:100,b:200};\r\n        //var b={b:100};\r\n        // var o=Object.assign({},a);\r\n        // console.log(o===a);\r\n        // console.log(o);\r\n\r\n\r\n        //遍历对象keys\r\n        Object.keys(a).forEach((item)=>{\r\n            console.log(item)//只是对象名称 a,b\r\n            console.log(a[item])//对象内容 100 200\r\n        })\r\n        for(var item in a){\r\n            console.log(item);\r\n        }\r\n    }\r\n    addItem=(msg)=>{\r\n        this.setState({\r\n            todo:[...this.state.todo,msg]\r\n        })\r\n        console.log(msg);\r\n    }\r\n    delItem=(a)=>{\r\n       //this.state.todo.splice(a,1)\r\n       //深拷贝\\浅拷贝\r\n       //状态state\r\n       //1.不要直接改变状态、处理状态\r\n       var todo =[...this.state.todo];\r\n       todo.splice(a,1);\r\n       //2.setstate是异步的\r\n       this.setState((state,props)=>({\r\n           todo:state.todo+1 \r\n       }))\r\n       this.setState({\r\n           todo:this.state.todo\r\n       })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput addTodo={this.addItem}/>\r\n                <Toding delTodo={this.delItem} todo={this.state.todo}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport Request from './Request';\n//jsx表达式会被react转成一个对象\n//import './index.css';\n//import Showtime from './newzujian';\nimport Todolist from './todolist/shijiandebangding';\nimport { directive } from '@babel/types';\nimport shijiandebangding from './todolist/shijiandebangding';\n//import App from './App';\n//import * as serviceWorker from './serviceWorker';\n\n\n//ReactDOM.render(<Showtime word=\"react\"/>,document.getElementById('root'));\nReactDOM.render(<Request/>, document.getElementById('root'));\n//ReactDOM.render(<Todolist word=\"react\"/>,document.getElementById('root'))\n\n//组件交互\n//父组件->子组件：调用时在子组件上添加属性\n//在子组件中通过props获取数据\n\n//react元素创建后不可改变\n// function tick(){\n//     var e=<div>\n//           <p>当前时间</p>\n//           <h1>{new Date().toLocaleString()}</h1>\n//           </div>\n//     ReactDOM.render(e,document.getElementById('root'));\n// }\n// tick();\n// setInterval(tick,1000);\n\n//组件\n\n//函数定义组件  当只是渲染结构的时候（无生命周期函数）\n// function Hello(props){\n//     return <h1>{props.name}</h1>\n// }\n// ReactDOM.render(\n//     <Hello name=\"React\"/>,document.getElementById('root')\n// );\n\n\n// var e=<div>he</div>;\n\n// function Todo(props){\n//     return (\n//         <div>\n//             {props.list.length>=5?<h1>TODO</h1>:''}\n//             {props.list.length>=5 && <h1>TODO</h1>}\n//             <ul>\n//                 {/* {props.list.map(function(item,index){\n//                         return <li key={item}>{item}</li>\n//                 })} */}\n//                 {\n//                     props.list.map((item,index)=>index%2===0 && <li key={item}>{item}</li>)\n//                 }\n//                 {/*条件渲染*/}\n//                 {/*循环渲染*/}\n//             </ul>\n//         </div>\n//     )\n// }\n// var item=[1,2,3,4,5];\n// ReactDOM.render(\n//     <Todo list={item}/>,document.getElementById('root')\n// );\n\n\n\n//var ele=React.createElement('div',{'id':'box'},'hello',React.createElement('h1',{'id':'h'},'react'));\n\n//var str='hello'\n\n// var ele = React.createElement(\n//     'div',\n//     {'id':'box'},\n//     'hello',\n//     React.createElement(\n//         'h1',\n//         {'id':'h'},\n//         'react'\n//     )\n// );\n\n\n// var obj={\n//     type:'div',\n//     props:{\n//         id:'box',\n//         class:'box',\n//         childern:['hello',{\n//             type:'h1',\n//             props:{\n//                 id:'h',\n//                 class:'h',\n//                 childern:['react']\n//             }\n//         }]\n//     }\n// }\n//加载HTML文件、浏览器解析HTML生成DOM树\n//link加载css文件、解析css规则、和DOM结合生成render tree 渲染树，浏览器渲染引擎渲染render tree\n//页面回流（重排）：内容改变、大小改变、结构改变\n//display width height from-size,会引起页面回流，声明一个css的一个类\n// var root =document.getElementById('root');\n// var width=root.offsetWidth;\n// setInterval(function(){\n//     width+=1;\n//     root.style.width=width+'px';\n// }, 100);\n//document.body.style.width='100px';\n//.change{\n//     width:'100px';\n//     height:'100px';\n// }\n// document.body.className='change';\n//页面重绘：把字体颜色、背景颜色等样式改变\n\n// var str='<h1>hhello</h1>'+'';\n// ele.innerHTML=str;\n//封装\n// function render(obj,container){\n//     var {type,props}=obj;\n    //文档碎片\n    //var fragment=document.createDocumentFragement();\n\n//     var ele=document.createElement(type);\n//     for(var item in props){\n//         if(item==='class'){\n//             ele.className=props[item];\n//         }else if(item==='children'){\n//             for(var i=0;i<props[item].length;i++){\n//                 if(typeof props[item][i]==='object'){\n//                     render(props[item][i],ele);\n//                 }else{\n//                 var txt=document.createTextNode(props[item][i]);\n//                 ele.appendChild(txt);\n//             }\n//           }\n//         }else{\n//             ele[item]=props[item];\n//         }\n//     }\n//     //fragment.appendChild(ele);\n//     container.appendChild(ele);\n// }\n//  render(obj,document.getElementById('root'));\n//var ele =<h1>{str}</h1>;\n//ReactDOM.render(ele,document.getElementById('root'));\n\n\n//var e=<h1>hello</h1>\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}