{"version":3,"sources":["logo.svg","serviceWorker.js","Todolist/Toing.js","Todolist/Todoinput.js","Todolist/Todolist.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Toding","console","log","this","props","todo","length","className","map","item","idex","key","type","checked","onClick","finsh","delTodo","end","new","Component","Todoinput","handleChange","e","setState","target","name","value","handleInput","keyCode","addTodo","n1","state","id","placeholder","onChange","onKeyDown","Todolist","addItem","msg","localStorage","setItem","JSON","stringify","updateItem","splice","delItem","a","newItem","parse","getItem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8079ac05.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default class Toding extends Component {\r\n    render() {\r\n        console.log(this.props.todo)\r\n        return (\r\n            <div>\r\n                <h1>正在进行--------{(this.props.todo||[]).length}</h1>\r\n                <ul className=\"list\">\r\n                   {\r\n                       (this.props.todo||[]).map((item,idex)=><li key={idex}><input type=\"checkbox\" checked='' onClick={()=>{this.props.finsh(idex)}} />{item}---<button onClick={()=>this.props.delTodo(idex,'todo')}>删除</button></li>)  \r\n                       }\r\n                </ul>\r\n                <h1>已经完成--------{(this.props.end||[]).length}</h1>\r\n                <ul>\r\n                    {\r\n                        (this.props.end || []).map((item,idex)=><li key={idex}><input type=\"checkbox\" checked='' onClick={()=>{this.props.new(idex)}} />{item}---<button onClick={()=>this.props.delTodo(idex,'end')}>删除</button></li>)\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nToding.propTypes={\r\n    todo:PropTypes.string\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            n1: ''\r\n        }\r\n    }\r\n    handleChange=(e)=>{\r\n\r\n        this.setState({\r\n            [e.target.name]:e.target.value\r\n        })\r\n    } \r\n    handleInput=(e)=>{\r\n        if(e.keyCode===13){\r\n        this.props.addTodo(e.target.value);//=this.state.val\r\n        this.setState({\r\n            n1: ''\r\n        })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>   \r\n                <label>输入</label>\r\n                <input id=\"inp\" placeholder=\"添加ToDo\" name=\"n1\" onChange={(e)=>this.handleChange(e)} value={this.state.n1} onKeyDown={(e)=>this.handleInput(e)} type=\"text\"/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport Toding from './Toing'\r\nimport Todoinput from './Todoinput'\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            //todo:[1,2,3]\r\n             todo:JSON.parse(localStorage.getItem('todo'))||[],\r\n             end:JSON.parse(localStorage.getItem('end'))||[]\r\n        }\r\n    }                                                                                                                                                                              \r\n    //添加新任务，在组件中以props的形式传递给子组件\r\n    addItem=(msg)=>{\r\n        this.setState((state)=>(\r\n            {\r\n                todo:[...state.todo,msg]\r\n            }\r\n        ),()=>{\r\n           localStorage.setItem('todo',JSON.stringify(this.state.todo)); \r\n        })\r\n        console.log(msg);\r\n    }\r\n    //更新完成的任务，在组件中以props的形式传递给子组件\r\n    updateItem=(idex)=>{\r\n        \r\n        this.setState({\r\n            end:[...this.state.end,this.state.todo.splice(idex,1)[0]],\r\n            todo:this.state.todo\r\n        },()=>{\r\n            localStorage.setItem('todo',JSON.stringify(this.state.todo));\r\n            localStorage.setItem('end',JSON.stringify(this.state.end));\r\n        })\r\n        console.log(this);\r\n    }\r\n    //删除已经完成的任务或不需要处理的任务\r\n    delItem=(a,item)=>{\r\n    //    var todo =[...this.state.todo];\r\n    //    todo.splice(a,1);\r\n    //    this.setState({\r\n    //        todo:todo\r\n    //    },()=>{localStorage.setItem('todo',JSON.stringify(this.state.todo));})\r\n    if(item=='todo'){\r\n        var todo=[...this.state.todo];\r\n        todo.splice(a,1);\r\n        this.setState({\r\n            todo:todo\r\n        },()=>{localStorage.setItem('todo',JSON.stringify(this.state.todo));})\r\n    }else if(item=='end'){\r\n        var end=[...this.state.end];\r\n        end.splice(a,1);\r\n        this.setState({\r\n            end:end\r\n        },()=>{\r\n            localStorage.setItem('end',JSON.stringify(this.state.end));\r\n        })\r\n    }\r\n    }\r\n    //在已经完成的任务中，点击复选框回到正在进行任务中\r\n    newItem=(idex)=>{\r\n        this.setState({\r\n            end:this.state.end,\r\n            todo:[...this.state.todo,this.state.end.splice(idex,1)[0]]\r\n        },()=>{\r\n            localStorage.setItem('todo',JSON.stringify(this.state.todo));\r\n            localStorage.setItem('end',JSON.stringify(this.state.end));\r\n        })\r\n        console.log(this);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput addTodo={this.addItem}/>\r\n                <Toding delTodo={this.delItem} new={this.newItem} todo={this.state.todo} finsh={this.updateItem} end={this.state.end}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Todolist from './Todolist/Todolist';\nReactDOM.render(<Todolist/>,document.getElementById('root')); \n\n"],"sourceRoot":""}